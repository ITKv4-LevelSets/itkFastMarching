/*=========================================================================
 *
 *  Copyright Insight Software Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/
#ifndef __itkFastMarchingUpwindGradientImageFilterBase_h
#define __itkFastMarchingUpwindGradientImageFilterBase_h

#include "itkFastMarchingImageFilterBase.h"
#include "itkImage.h"

namespace itk
{
/** \class FastMarchingUpwindGradientImageFilterBase
 *
 * \brief Generates the upwind gradient field of fast marching arrival times.
 *
 * This filter adds some extra functionality to its base class. While the
 * solution T(x) of the Eikonal equation is being generated by the base class
 * with the fast marching method, the filter generates the upwind gradient
 * vectors of T(x), storing them in an image.
 *
 * Since the Eikonal equation generates the arrival times of a wave travelling
 * at a given speed, the generated gradient vectors can be interpreted as the
 * slowness (1/velocity) vectors of the front (the quantity inside the modulus
 * operator in the Eikonal equation).
 *
 * Gradient vectors are computed using upwind finite differences, that is,
 * information only propagates from points where the wavefront has already
 * passed. This is consistent with how the fast marching method works.
 *
 * \author Luca Antiga Ph.D.  Biomedical Technologies Laboratory,
 *                            Bioengineering Deparment, Mario Negri Institute, Italy.
 */
template< unsigned int VDimension,
         typename TInputPixel,
         typename TOutputPixel,
         class TCriterion,
         class TSuperclass >
class ITK_EXPORT FastMarchingUpwindGradientImageFilterBase:
  public TSuperclass
{
public:
  /** Standard class typdedefs. */
  typedef FastMarchingUpwindGradientImageFilterBase             Self;
  typedef FastMarchingImageFilterBase< VDimension, TInputPixel,
    TOutputPixel, TCriterion > Superclass;
  typedef SmartPointer< Self >                              Pointer;
  typedef SmartPointer< const Self >                        ConstPointer;

  /** Method for creation through the object factory. */
  itkNewMacro(Self);

  /** Run-time type information (and related methods). */
  itkTypeMacro(FastMarchingUpwindGradientImageFilterBase,
               TSuperclass);

  /** The dimension of the level set. */
  itkStaticConstMacro(ImageDimension, unsigned int,
                      Superclass::ImageDimension );

  typedef typename Superclass::NodeType        NodeType;
  typedef typename Superclass::OutputImageType OutputImageType;
  typedef typename Superclass::OutputPixelType OutputPixelType;
  typedef typename Superclass::OutputSpacingType OutputSpacingType;

  /** GradientPixel typedef support. */
  typedef CovariantVector< OutputPixelType,
                           ImageDimension > GradientPixelType;

  /** GradientImage typedef support. */
  typedef Image< GradientPixelType,
                 ImageDimension > GradientImageType;

  /** GradientImagePointer typedef support. */
  typedef typename GradientImageType::Pointer GradientImagePointer;

  /** Get the gradient image. */
  GradientImagePointer GetGradientImage() const
  { return m_GradientImage; }

  /** Set the GenerateGradientImage flag. Instrument the algorithm to generate
   * the gradient of the Eikonal equation solution while fast marching. */
  itkSetMacro(GenerateGradientImage, bool);

  /** Get the GenerateGradientImage flag. */
  itkGetConstReferenceMacro(GenerateGradientImage, bool);
  itkBooleanMacro(GenerateGradientImage);

protected:
  FastMarchingUpwindGradientImageFilterBase();
  ~FastMarchingUpwindGradientImageFilterBase(){}

  void PrintSelf(std::ostream & os, Indent indent) const;

  virtual void InitializeOutput( OutputImageType* oImage );

  virtual void UpdateNeighbors( OutputImageType* oImage,
                               const NodeType& iNode );

  virtual void ComputeGradient(OutputImageType* oImage,
                               const NodeType& iNode );

private:
  FastMarchingUpwindGradientImageFilterBase(const Self &); //purposely not
                                                       // implemented
  void operator=(const Self &);                        //purposely not
                                                       // implemented

  GradientImagePointer m_GradientImage;

  bool m_GenerateGradientImage;
};

template< unsigned int VDimension,
         typename TInputPixel,
         typename TOutputPixel,
         class TCriterion >
class ITK_EXPORT IsotropicFastMarchingUpwindGradientImageFilterBase:
    public FastMarchingUpwindGradientImageFilterBase< VDimension, TInputPixel,
    TOutputPixel, TCriterion,
    FastMarchingImageFilterBase< VDimension, TInputPixel,
      TOutputPixel, TCriterion >
    >
  {
public:
  typedef FastMarchingImageFilterBase< VDimension, TInputPixel,
    TOutputPixel, TCriterion > GrandParentClassType;

  /** Standard class typdedefs. */
  typedef IsotropicFastMarchingUpwindGradientImageFilterBase             Self;
  typedef FastMarchingUpwindGradientImageFilterBase< VDimension, TInputPixel,
    TOutputPixel, TCriterion, GrandParentClassType > Superclass;
  typedef SmartPointer< Self >                              Pointer;
  typedef SmartPointer< const Self >                        ConstPointer;

  /** Method for creation through the object factory. */
  itkNewMacro(Self);

  /** Run-time type information (and related methods). */
  itkTypeMacro(IsotropicFastMarchingUpwindGradientImageFilterBase,
               FastMarchingUpwindGradientImageFilterBase );

  /** The dimension of the level set. */
  itkStaticConstMacro(ImageDimension, unsigned int,
                      Superclass::ImageDimension );

  typedef typename Superclass::NodeType        NodeType;
  typedef typename Superclass::OutputImageType OutputImageType;
  typedef typename Superclass::OutputPixelType OutputPixelType;
  typedef typename Superclass::OutputSpacingType OutputSpacingType;

  /** GradientPixel typedef support. */
  typedef CovariantVector< OutputPixelType,
                           ImageDimension > GradientPixelType;

  /** GradientImage typedef support. */
  typedef Image< GradientPixelType,
                 ImageDimension > GradientImageType;

  /** GradientImagePointer typedef support. */
  typedef typename GradientImageType::Pointer GradientImagePointer;

protected:
  IsotropicFastMarchingUpwindGradientImageFilterBase() : Superclass() {}
  ~IsotropicFastMarchingUpwindGradientImageFilterBase() {}

private:
  void operator = ( const Self& );
  IsotropicFastMarchingUpwindGradientImageFilterBase( const Self& );
  };
} // namespace itk

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkFastMarchingUpwindGradientImageFilterBase.txx"
#endif

#endif
